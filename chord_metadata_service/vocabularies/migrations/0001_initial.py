# Generated by Django 2.2.13 on 2020-07-02 02:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SkosCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Collection label or name.', max_length=300, verbose_name='skos:prefLabel')),
                ('label_lang', models.CharField(blank=True, default='en', help_text='Language of preferred label given above.', max_length=3, verbose_name='skos:prefLabel language')),
                ('creator', models.TextField(blank=True, help_text='Person or organisation that created this collection.', verbose_name='dc:creator')),
                ('contributor', models.TextField(blank=True, help_text='Person or organisation that made contributions to the collection.', verbose_name='dc:contributor')),
                ('legacy_id', models.CharField(blank=True, max_length=200)),
                ('date_created', models.DateTimeField(auto_now=True)),
                ('date_modified', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='skos_collection_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Collection',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SkosConceptScheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title  for new concept scheme', max_length=300, verbose_name='dc:title')),
                ('title_lang', models.CharField(blank=True, default='en', help_text='Language of title given above', max_length=3, verbose_name='dc:title language')),
                ('identifier', models.URLField(blank=True, help_text='URI to unambiguously identify current Concept Scheme')),
                ('creator', models.TextField(blank=True, help_text='Person or organisation primarily responsible for making current concept scheme.', verbose_name='dc:creator')),
                ('contributor', models.TextField(blank=True, help_text='Person or organisation that made contributions to the vocabulary.', verbose_name='dc:contributor')),
                ('language', models.TextField(blank=True, help_text='Language(s) used in concept scheme.', verbose_name='dc:language')),
                ('subject', models.TextField(blank=True, help_text='The subject of the vocabulary.', verbose_name='dc:subject')),
                ('version', models.CharField(blank=True, help_text='Current version.', max_length=300)),
                ('publisher', models.CharField(blank=True, help_text='Organisation responsible for making the vocabulary available', max_length=300, verbose_name='dc:publisher')),
                ('license', models.CharField(blank=True, help_text='Information about license applied to the vocabulary.', max_length=300, verbose_name='dct:license')),
                ('owner', models.CharField(blank=True, help_text='Person or organisation that owns the rights for the vocabulary.', max_length=300)),
                ('relation', models.URLField(blank=True, help_text='Related resource or project. E.g. in case of relation to a project, add link to a project website.', verbose_name='dc:relation')),
                ('coverage', models.TextField(blank=True, help_text='Spatial or temporal frame that the vocabulary relates to.', verbose_name='dc:coverage')),
                ('legacy_id', models.CharField(blank=True, max_length=200)),
                ('date_created', models.DateTimeField(auto_now=True)),
                ('date_modified', models.DateTimeField(auto_now_add=True)),
                ('date_issued', models.DateField(blank=True, help_text='Date of official publication of this concept scheme.', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='skos_cs_created', to=settings.AUTH_USER_MODEL)),
                ('curator', models.ManyToManyField(blank=True, help_text='The selected user(s) will be able to view and edit this Concept Scheme.', related_name='skos_cs_curated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Concept Scheme',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SkosConcept',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pref_label', models.CharField(help_text='Preferred label for concept.', max_length=300, verbose_name='skos:prefLabel')),
                ('pref_label_lang', models.CharField(blank=True, default='en', help_text='Language of preferred label given above.', max_length=3, verbose_name='skos:prefLabel language')),
                ('top_concept', models.BooleanField(help_text='Is this concept a top concept of concept scheme?', null=True)),
                ('notation', models.CharField(blank=True, help_text='A notation is a unique string used to identify the concept in current vocabulary.', max_length=300, verbose_name='skos:notation')),
                ('related', models.TextField(blank=True, help_text='An associative relationship between two concepts.', verbose_name='skos:related')),
                ('broad_match', models.TextField(blank=True, help_text='External concept with a broader meaning.', verbose_name='skos:broadMatch')),
                ('narrow_match', models.TextField(blank=True, help_text='External concept with a narrower meaning.', verbose_name='skos:narrowMatch')),
                ('exact_match', models.TextField(blank=True, help_text='External concept that can be used interchangeably and has the exact same meaning.', verbose_name='skos:exactMatch')),
                ('related_match', models.TextField(blank=True, help_text='External concept that has an associative relationship with this concept.', verbose_name='skos:relatedMatch')),
                ('close_match', models.TextField(blank=True, help_text='External concept that has a similar meaning.', verbose_name='skos:closeMatch')),
                ('legacy_id', models.CharField(blank=True, max_length=200)),
                ('creator', models.TextField(blank=True, help_text='Person or organisation that created this concept.', verbose_name='dc:creator')),
                ('contributor', models.TextField(blank=True, help_text='Person or organisation that made contributions to this concept.', verbose_name='dc:contributor')),
                ('needs_review', models.BooleanField(help_text='Check if this concept needs to be reviewed.', null=True)),
                ('date_created', models.DateTimeField(auto_now=True)),
                ('date_modified', models.DateTimeField(auto_now_add=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('broader_concept', mptt.fields.TreeForeignKey(blank=True, help_text='Concept with a broader meaning that this concept inherits from.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='narrower_concepts', to='vocabularies.SkosConcept', verbose_name='skos:broader')),
                ('collection', models.ManyToManyField(blank=True, help_text='Collection that this concept is a member of.', related_name='has_members', to='vocabularies.SkosCollection', verbose_name='member of skos:Collection')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='skos_concept_created', to=settings.AUTH_USER_MODEL)),
                ('scheme', models.ForeignKey(help_text='Concept scheme to which this concept belongs.', on_delete=django.db.models.deletion.CASCADE, related_name='has_concepts', to='vocabularies.SkosConceptScheme', verbose_name='skos:inScheme')),
            ],
            options={
                'verbose_name': 'Concept',
            },
        ),
        migrations.AddField(
            model_name='skoscollection',
            name='scheme',
            field=models.ForeignKey(help_text='Concept scheme that this collection belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='has_collections', to='vocabularies.SkosConceptScheme', verbose_name='skos:ConceptScheme'),
        ),
    ]
